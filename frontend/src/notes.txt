Tag := allows for a user defined sorting order of the graph, a tag is a property
of the VertexClass.

Archival := a boolean attribute of the VertexClass.

Completable := a boolean attribute of a TaskVertex.

TempVar := implements similar properties of categories and task, having
    - A set of tags
    - An Archival
    - An identifier set (color, name, description, attachments, )

CategoryVertex := a VertexClass with
    - background image

CompletableVertex := a VertexClass with
    - Completable

Graph := encodes a logical dependency amongst the VertexClass:
    - Or, if A is completed that B or C is completed
    - and, if A is completed then B and C are completed
    - not, if A is completed then B cannot completed


---------------------- Implementation ------------------------

interface Archival
interface Completable

abstract class Vertex implements Archival{ // has tags, name, description, attachments

    Observable<String> name

}

class Task extends Vertex implements Completable
class Category extends Vertex


// IN workSpaceData
    Graph workSpaceData;

Graph<T extends Vertex and Completable, C extends Vertex>

    HashMap<TempVar, HashSet< OrSet > vertices

    public class Operand {
        T t;
        boolean NOT;
    }

    HashMap<Vertex, SortedSet< SortedSet<Operand>>> graph;

    private boolean evaluateDependency(AdjList list) {
        for(E e : list)
            if (!isTrue(list))
                return false;

        return true;
    }

    set.isTrue(); // return the corresponding truth value

A = {T}
---------
{}
{B, C} = {T, F}
{~Z, D} = {T, F}


{D}
~{Z}
